name: Build and Deploy
on:
  push:
    branches: [ main ]
  workflow_dispatch:
env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: 200842396352.dkr.ecr.ap-southeast-1.amazonaws.com/client-service
  ECS_CLUSTER: client-ecs-cluster
  ECS_SERVICE: client-service
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push
      id: build-image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Docker image
        if ! docker build -t $ECR_REPOSITORY:$IMAGE_TAG .; then
          echo "Failed to build Docker image"
          exit 1
        fi
        
        # Push the image with SHA tag
        if ! docker push $ECR_REPOSITORY:$IMAGE_TAG; then
          echo "Failed to push image with SHA tag"
          exit 1
        fi
        
        # Tag and push as latest
        if ! docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REPOSITORY:latest; then
          echo "Failed to tag image as latest"
          exit 1
        fi
        
        if ! docker push $ECR_REPOSITORY:latest; then
          echo "Failed to push latest tag"
          exit 1
        fi
        
        echo "image=$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Deploy to ECS (only if exists)
      run: |
        echo "Checking if ECS service exists..."
        
        SERVICE_STATUS=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].status' \
          --output text 2>/dev/null || echo "NONE")
        
        if [ "$SERVICE_STATUS" = "ACTIVE" ]; then
          echo "ECS service found and active. Starting deployment..."
          
          # Get current task definition
          TASK_DEF=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].taskDefinition' \
            --output text)
          
          echo "Current task definition: $TASK_DEF"
          
          # Get task definition details
          aws ecs describe-task-definition \
            --task-definition $TASK_DEF \
            --query 'taskDefinition' > task-def.json
          
          # Create new task definition with updated image
          NEW_TASK_DEF=$(jq --arg IMAGE "${{ env.ECR_REPOSITORY }}:${{ github.sha }}" '
            {
              family,
              taskRoleArn,
              executionRoleArn,
              networkMode,
              containerDefinitions,
              volumes,
              placementConstraints,
              requiresCompatibilities,
              cpu,
              memory
            } | 
            with_entries(select(.value != null)) |
            .containerDefinitions[0].image = $IMAGE
          ' task-def.json | \
          aws ecs register-task-definition --cli-input-json file:///dev/stdin --query 'taskDefinition.taskDefinitionArn' --output text)
          
          echo "New task definition registered: $NEW_TASK_DEF"
          
          # Deploy with minimumHealthyPercent=50 to avoid port conflicts
          echo "Deploying new task definition with rolling update..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition $NEW_TASK_DEF \
            --deployment-configuration "minimumHealthyPercent=50,maximumPercent=100" \
            --force-new-deployment
          
          echo "Waiting for deployment to complete..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}
          
          echo "✅ Deployment complete!"
        else
          echo "⚠️ ECS service not found or not active (status: $SERVICE_STATUS). Skipping deployment."
        fi
    
    - name: Reset ECS deployment configuration
      if: success()
      run: |
        echo "Resetting deployment configuration to 100/200..."
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \ 
          --deployment-configuration "minimumHealthyPercent=100,maximumPercent=200"

    - name: Deployment Summary
      if: always()
      run: |
        echo "### 🚀 Deployment Info" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** ${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cluster:** ${{ env.ECS_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Service:** ${{ env.ECS_SERVICE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        
        SERVICE_CHECK=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].status' \
          --output text 2>/dev/null || echo "NOT_FOUND")
        
        if [ "$SERVICE_CHECK" = "ACTIVE" ]; then
          echo "- ✅ **ECS deployment successful**" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ **ECS deployment skipped** (Service not found or not active)" >> $GITHUB_STEP_SUMMARY
        fi
